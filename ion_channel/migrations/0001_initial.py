# Generated by Django 2.0.3 on 2018-03-07 05:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_type', models.CharField(choices=[('Xenopus Oocytes', 'Xenopus Oocytes'), ('Caenorhabditis elegans body wall muscle', 'Caenorhabditis elegans body wall muscle'), ('HEK', 'HEK'), ('CHO', 'CHO'), ('COS-7', 'COS-7'), ('Generic', 'Generic')], default='Xenopus Oocytes', max_length=300)),
                ('membrane_capacitance', models.FloatField(blank=True, default=2e-07, max_length=200, null=True, verbose_name='Capacitance of the membrane (F)')),
                ('specific_capacitance', models.FloatField(blank=True, default=0.01, null=True, verbose_name='Specific capacitance of the membrane (F/m2)')),
                ('area', models.FloatField(blank=True, default=2e-05, null=True, verbose_name='Total area of the cell (m2)')),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_axis_type', models.CharField(choices=[('I', 'Current'), ('T', 'Time'), ('Tau_a', 'Activation Time'), ('Tau_i', 'Inactivation Time'), ('I_ss', 'Steady-state Current'), ('I_peak', 'Peak Current'), ('I_norm', 'Normalized Current'), ('I_norm_i', 'Normalized Inactivation Current'), ('V', 'Voltage'), ('G', 'Conductance'), ('G/G_max', 'G/G_max'), ('Po', 'Open Probability'), ('Po_Peak', 'Peak Open Probability'), ('Ca_concentration', 'Calcium Concentration'), ('Cl_concentration', 'Chloride Concentration'), ('Bar', 'Bar Chart')], default='T', max_length=50)),
                ('x_axis_unit', models.CharField(default='ms', max_length=50, verbose_name='Axis unit in the original figure (e.g. ms)')),
                ('x_axis_toSI', models.FloatField(default=0.001, verbose_name='Multiply by this value to convert to SI (e.g. 1e-3)')),
                ('y_axis_type', models.CharField(choices=[('I', 'Current'), ('T', 'Time'), ('Tau_a', 'Activation Time'), ('Tau_i', 'Inactivation Time'), ('I_ss', 'Steady-state Current'), ('I_peak', 'Peak Current'), ('I_norm', 'Normalized Current'), ('I_norm_i', 'Normalized Inactivation Current'), ('V', 'Voltage'), ('G', 'Conductance'), ('G/G_max', 'G/G_max'), ('Po', 'Open Probability'), ('Po_Peak', 'Peak Open Probability'), ('Ca_concentration', 'Calcium Concentration'), ('Cl_concentration', 'Chloride Concentration'), ('Bar', 'Bar Chart')], default='I', max_length=50)),
                ('y_axis_unit', models.CharField(default='uA', max_length=50, verbose_name='Axis unit in the original figure (e.g. uA)')),
                ('y_axis_toSI', models.FloatField(default=1e-06, verbose_name='Multiply by this value to convert to SI (e.g. 1e-6)')),
                ('figure_ref_address', models.CharField(max_length=50, verbose_name='Figure number (e.g. 2A)')),
                ('figure_ref_caption', models.TextField(verbose_name='Figure caption')),
                ('file', models.ImageField(upload_to='ion_channel/graph/%Y/%m/%d')),
                ('digitized_plot', models.ImageField(blank=True, null=True, upload_to='ion_channel/plots')),
                ('digitized_plot_file', models.FileField(blank=True, null=True, upload_to='ion_channel/plots')),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_name', models.CharField(max_length=200)),
                ('series_data', models.TextField()),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ion_channel.Graph')),
            ],
        ),
        migrations.CreateModel(
            name='IonChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_name', models.CharField(max_length=300, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=300, null=True)),
                ('gene_symbol', models.CharField(max_length=300, null=True)),
                ('isoform', models.CharField(blank=True, max_length=20, null=True)),
                ('animal', models.CharField(blank=True, choices=[('Homo sapiens (Human)', 'Human'), ('Rattus norvegicus (Rat)', 'Rat'), ('Mus musculus (Mouse)', 'Mouse'), ('Oryctolagus cuniculus (rabbit)', 'Rabbit'), ('Canis lupus familiaris (Dog)', 'Dog'), ('Xenopus laevis (African clawed frog)', 'African clawed frog'), ('Drosophila melanogaster (Fruit fly)', 'Fruit fly'), ('Caenorhabditis elegans (C. elegans)', 'C. elegans'), ('Danio rerio (zebrafish)', 'Zebrafish'), ('Panulirus interruptus (California spiny lobster)', 'California spiny lobster'), ('Panulirus argus (Caribbean spiny lobster)', 'Caribbean spiny lobster'), ('Aplysia californica (California sea hare)', 'California sea hare'), ('Schistosoma mansoni (Blood fluke)', 'Blood fluke'), ('Polyorchis penicillatus (penicillate jellyfish)', 'Penicillate Jellyfish'), ('Mustela putorius furo (domestic ferret)', 'Domestic ferret'), ('Doryteuthis pealeii (Longfin inshore squid) (Loligo pealeii)', 'Loligo pealeii'), ('Aplysia sp. (Sea hare)', 'Sea hare'), ('Ictalurus punctatus (channel catfish)', 'Channel catfish'), ('Polyorchis penicillatus (penicillate jellyfish)', 'Penicillate jellyfish'), ('Squalus acanthias (Spiny dogfish)', 'Spiny dogfish'), ('Nematostella vectensis (starlet sea anemone)', 'Starlet sea anemone'), ('Cavia porcellus (domestic guinea pig)', 'Domestic guinea pig'), ('Blattella germanica (German cockroach)', 'German cockroach'), ('Ciona intestinalis (vase tunicate)', 'Vase tunicate'), ('Arabidopsis thaliana (thale cress)', 'Arabidopsis thaliana (thale cress)'), ('Zea mays', 'Zea mays'), ('Others', 'Others')], max_length=200, null=True)),
                ('channel_type', models.CharField(blank=True, choices=[('Voltage-gated potassium channels', 'KV'), ('Calcium-activated potassium channels', 'KCa'), ('Inwardly rectifying potassium channels', 'Kir'), ('Two-P potassium channels', 'K2p'), ('Voltage-gated calcium channels', 'CaV'), ('Voltage-gated sodium channels', 'NaV'), ('Voltage-gated proton channels', 'HV'), ('Voltage-gated chloride channels', 'ClV'), ('Transient receptor potential cation channels', 'TRP'), ('Cation channels sperm associated', 'CATSPER'), ('Cyclic nucleotide gated channels', 'CNG'), ('Two pore segment channels', 'TPCN'), ('Unknown', 'Unknown')], max_length=300, null=True)),
                ('class_symbol', models.CharField(blank=True, max_length=300, null=True)),
                ('subfamily', models.CharField(blank=True, max_length=20, null=True)),
                ('member', models.CharField(blank=True, max_length=20, null=True)),
                ('current_type', models.CharField(blank=True, max_length=300, null=True)),
                ('aliases', models.CharField(blank=True, max_length=300, null=True)),
                ('ion_type', models.CharField(blank=True, choices=[('Ca2+', 'Calcium'), ('K+', 'Potassium'), ('Cl-', 'Chloride'), ('Na+', 'Sodium'), ('Cation', 'Cation')], max_length=200, null=True)),
                ('uniprot_id', models.CharField(blank=True, max_length=300, null=True)),
                ('refSeq_id', models.CharField(blank=True, max_length=300, null=True)),
                ('gene_id', models.CharField(blank=True, max_length=300, null=True)),
                ('conductance', models.FloatField(blank=True, default=10, null=True, verbose_name='Single Channel Conductance (ps)')),
                ('sequence', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('create_date', models.DateTimeField()),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('links', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IonChannelModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('HH', 'Hodgkin-Huxley'), ('Markov', 'Markov')], default='HH', max_length=300)),
                ('modeling_type', models.CharField(choices=[('Experimental', 'Experimental'), ('Estimated', 'Estimated')], default='Experimental', max_length=300)),
                ('date', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField(blank=True, default=None, null=True, verbose_name='Evaluated Score')),
                ('parameters', models.FilePathField(blank=True, null=True)),
                ('neuroML_file', models.FilePathField(blank=True, null=True)),
                ('neuron_file', models.FilePathField(blank=True, null=True)),
                ('cell_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ion_channel.Cell')),
                ('channel_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ion_channel.IonChannel')),
                ('graphs', models.ManyToManyField(to='ion_channel.Graph')),
            ],
        ),
        migrations.CreateModel(
            name='PatchClamp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('TMVC', 'Two Microelectrode Voltage Clamp'), ('Inside-Out', 'Inside-Out Patch Clamp')], default='TMVC', max_length=200)),
                ('duration', models.FloatField(verbose_name='Patch-Clamp Duration (ms)')),
                ('start_time', models.FloatField(default=0, verbose_name='Start time (ms)')),
                ('end_time', models.FloatField(verbose_name='End time (ms) (default=duration)')),
                ('holding_potential', models.FloatField(verbose_name='Holding potential (mV)')),
                ('voltage_start', models.FloatField(verbose_name='Initial voltage (mV)')),
                ('voltage_end', models.FloatField(verbose_name='Final voltage (mV)')),
                ('voltage_steps', models.FloatField(default=10, verbose_name='Voltage steps (mV)')),
                ('depolarization_step', models.FloatField(blank=True, null=True, verbose_name='Depolarization step (mV)')),
                ('cell_age', models.FloatField(blank=True, default=None, null=True, verbose_name='Age of the cell (days)')),
                ('temperature', models.FloatField(blank=True, default=21, null=True, verbose_name='Temperature (Celsius)')),
                ('Ca_concentration', models.FloatField(blank=True, default=None, null=True, verbose_name='Initial molar concentration of Calcium (uM)')),
                ('blockers', models.CharField(blank=True, max_length=300, null=True, verbose_name='Ion channel blockers (e.g. 500e-6 Cd2+,...)')),
                ('extra_solution', models.TextField(blank=True, null=True, verbose_name='Extracellular Solution (e.g. 140e-3 NaCl, 5e-3 KCl,...)')),
                ('pipette_solution', models.TextField(blank=True, null=True, verbose_name='Pipette Solution (e.g. 120e-3 KCl, 20e-3 KOH,...)')),
                ('cell', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='ion_channel.Cell')),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doi', models.CharField(blank=True, max_length=300, null=True, unique=True)),
                ('PMID', models.CharField(blank=True, max_length=300, null=True, unique=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('citation', models.TextField(blank=True, null=True)),
                ('year', models.CharField(blank=True, max_length=300, null=True)),
                ('authors', models.CharField(blank=True, max_length=300, null=True)),
                ('journal', models.CharField(blank=True, max_length=300, null=True)),
                ('volume', models.CharField(blank=True, max_length=300, null=True)),
                ('issue', models.CharField(blank=True, max_length=300, null=True)),
                ('pages', models.CharField(blank=True, max_length=300, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('create_date', models.DateTimeField(auto_now=True)),
                ('tags', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(choices=[('Genomics', 'Genomics'), ('Proteomics', 'Proteomics'), ('Electrophysiology', 'Electrophysiology'), ('Combination', 'Combination')], default='Electrophysiology', max_length=300)),
                ('file_url', models.URLField(blank=True, null=True)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Contributor')),
            ],
        ),
        migrations.AddField(
            model_name='ionchannelmodel',
            name='references',
            field=models.ManyToManyField(to='ion_channel.Reference'),
        ),
        migrations.AddField(
            model_name='ionchannelmodel',
            name='username',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Curator(s)'),
        ),
        migrations.AddField(
            model_name='ionchannel',
            name='references',
            field=models.ManyToManyField(blank=True, to='ion_channel.Reference'),
        ),
        migrations.AddField(
            model_name='ionchannel',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Curator'),
        ),
        migrations.AddField(
            model_name='graph',
            name='ion_channel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ion_channel.IonChannel'),
        ),
        migrations.AddField(
            model_name='graph',
            name='patch_clamp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ion_channel.PatchClamp'),
        ),
        migrations.AddField(
            model_name='graph',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ion_channel.Reference'),
        ),
    ]
